// <auto-generated />
using System;
using MVC.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MVC.Migrations
{
    [DbContext(typeof(atdbContext))]
    partial class atdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MVC.Models.Cliente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<long>("EnderecoId")
                        .HasPrecision(10, 2)
                        .HasColumnType("bigint")
                        .HasColumnName("endereco_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Sexo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("sexo");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("telefone");

                    b.Property<string>("tipoPessoa")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tipo_pessoa");

                    b.HasKey("Id", "Cpf")
                        .HasName("cliente_pkey");

                    b.HasIndex("EnderecoId");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("MVC.Models.Emprestimo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ClienteCpf")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cliente_cpf");

                    b.Property<string>("FerramentaCodigo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ferramenta_codigo");

                    b.Property<DateOnly>("DataDevolucao")
                        .HasColumnType("date")
                        .HasColumnName("data_devolucao");

                    b.Property<DateOnly>("DataEmprestimo")
                        .HasColumnType("date")
                        .HasColumnName("data_emprestimo");

                    b.Property<char>("IndicadorDevolucao")
                        .HasColumnType("char")
                        .HasColumnName("indicador_devolucao");

                    b.Property<decimal>("ValorTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("valor_total");

                    b.HasKey("Id", "ClienteCpf", "FerramentaCodigo")
                        .HasName("emprestimo_pkey");

                    b.HasIndex("ClienteCpf");

                    b.HasIndex("FerramentaCodigo");

                    b.ToTable("emprestimo", (string)null);
                });

            modelBuilder.Entity("MVC.Models.Endereco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cidade");

                    b.Property<string>("Complemento")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("complemento");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("estado");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("logradouro");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("numero");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("pais");

                    b.HasKey("Id");

                    b.ToTable("endereco", (string)null);
                });

            modelBuilder.Entity("MVC.Models.Ferramentum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Codigo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("codigo");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<string>("FuncionarioCadastroFuncional")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("funcionario_cadastro_funcional");

                    b.Property<string>("Marca")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("marca");

                    b.Property<long?>("Quantidade")
                        .HasColumnType("bigint")
                        .HasColumnName("quantidade");

                    b.Property<short>("SituacaoId")
                        .HasColumnType("smallint")
                        .HasColumnName("situacao_id");

                    b.Property<long>("TipoId")
                        .HasColumnType("bigint")
                        .HasColumnName("tipo_id");

                    b.Property<decimal>("ValorCompra")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("valor_compra");

                    b.Property<decimal>("ValorDiaria")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("valor_diaria");

                    b.HasKey("Id", "Codigo")
                        .HasName("ferramenta_pkey");

                    b.HasIndex("FuncionarioCadastroFuncional");

                    b.HasIndex("SituacaoId");

                    b.HasIndex("TipoId");

                    b.HasIndex(new[] { "Codigo" }, "UQ_Ferramenta_Codigo")
                        .IsUnique();

                    b.ToTable("ferramenta", (string)null);
                });

            modelBuilder.Entity("MVC.Models.Funcionario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<string>("Funcional")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("funcional");

                    b.Property<DateTime>("DataAdmissao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_admissao");

                    b.Property<DateTime?>("DataDemissao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_demissao");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<long>("EnderecoId")
                        .HasColumnType("bigint")
                        .HasColumnName("endereco_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nome");

                    b.Property<short>("PapelId")
                        .HasColumnType("smallint")
                        .HasColumnName("papel_id");

                    b.Property<short>("PermissaoId")
                        .HasColumnType("smallint")
                        .HasColumnName("permissao_id");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("senha");

                    b.Property<string>("Sexo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sexo");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("telefone");

                    b.HasKey("Id", "Cpf", "Funcional")
                        .HasName("funcionario_pkey");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("PapelId");

                    b.HasIndex("PermissaoId");

                    b.HasIndex(new[] { "Email" }, "UQ_Funcionario_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Funcional" }, "UQ_Funcionario_Funcional")
                        .IsUnique();

                    b.ToTable("funcionario", (string)null);
                });

            modelBuilder.Entity("MVC.Models.Orcamento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ClienteCpf")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cliente_cpf");

                    b.Property<string>("FerramentaCodigo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ferramenta_codigo");

                    b.Property<DateTime>("DataOrcamento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_orcamento");

                    b.Property<DateTime>("DataValidade")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_validade");

                    b.Property<decimal>("ValorTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("valor_total");

                    b.Property<bool>("active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.HasKey("Id", "ClienteCpf", "FerramentaCodigo")
                        .HasName("orcamento_pkey");

                    b.HasIndex("ClienteCpf");

                    b.HasIndex("FerramentaCodigo");

                    b.ToTable("orcamento", (string)null);
                });

            modelBuilder.Entity("MVC.Models.Orcamento_ferramenta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ferramenta_id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ferramenta_ID");

                    b.Property<long?>("orcamento_id")
                        .HasColumnType("bigint")
                        .HasColumnName("orcamento_ID");

                    b.HasKey("Id");

                    b.HasIndex("ferramenta_id");

                    b.HasIndex("orcamento_id");

                    b.ToTable("Orcamento_Ferramenta", (string)null);
                });

            modelBuilder.Entity("MVC.Models.Processo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FuncionarioResponsavelFuncional")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("funcionario_responsavel_funcional");

                    b.Property<string>("FerramentaCodigo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ferramenta_codigo");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<string>("Parecer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("parecer");

                    b.Property<short>("TipoProcessoId")
                        .HasColumnType("smallint")
                        .HasColumnName("tipo_processo_id");

                    b.HasKey("Id", "FuncionarioResponsavelFuncional", "FerramentaCodigo")
                        .HasName("processo_pkey");

                    b.HasIndex("FerramentaCodigo");

                    b.HasIndex("FuncionarioResponsavelFuncional");

                    b.HasIndex("TipoProcessoId");

                    b.ToTable("processo", (string)null);
                });

            modelBuilder.Entity("MVC.Models.TipoFerramentum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nome" }, "UQ_Tipo_Ferramenta_Nome")
                        .IsUnique();

                    b.ToTable("tipo_ferramenta", (string)null);
                });

            modelBuilder.Entity("MVC.Models.TipoPapel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nome" }, "UQ_Tipo_Papel_Nome")
                        .IsUnique();

                    b.ToTable("tipo_papel", (string)null);
                });

            modelBuilder.Entity("MVC.Models.TipoPermissao", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nome" }, "UQ_Tipo_Permissao_Nome")
                        .IsUnique();

                    b.ToTable("tipo_permissao", (string)null);
                });

            modelBuilder.Entity("MVC.Models.TipoProcesso", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nome" }, "UQ_Tipo_Processo_Nome")
                        .IsUnique();

                    b.ToTable("tipo_processo", (string)null);
                });

            modelBuilder.Entity("MVC.Models.TipoSituacao", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nome" }, "UQ_Tipo_Situacao_Nome")
                        .IsUnique();

                    b.ToTable("tipo_situacao", (string)null);
                });

            modelBuilder.Entity("MVC.Models.Cliente", b =>
                {
                    b.HasOne("MVC.Models.Endereco", "Endereco")
                        .WithMany("Clientes")
                        .HasForeignKey("EnderecoId")
                        .IsRequired()
                        .HasConstraintName("FK_Cliente_Endereco");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("MVC.Models.Emprestimo", b =>
                {
                    b.HasOne("MVC.Models.Cliente", "ClienteCpfNavigation")
                        .WithMany("Emprestimos")
                        .HasForeignKey("ClienteCpf")
                        .HasPrincipalKey("Cpf")
                        .IsRequired()
                        .HasConstraintName("FK_Emprestimo_Cliente_Cpf");

                    b.HasOne("MVC.Models.Ferramentum", "FerramentaCodigoNavigation")
                        .WithMany("Emprestimos")
                        .HasForeignKey("FerramentaCodigo")
                        .HasPrincipalKey("Codigo")
                        .IsRequired()
                        .HasConstraintName("FK_Emprestimo_Ferramenta_Codigo");

                    b.Navigation("ClienteCpfNavigation");

                    b.Navigation("FerramentaCodigoNavigation");
                });

            modelBuilder.Entity("MVC.Models.Ferramentum", b =>
                {
                    b.HasOne("MVC.Models.Funcionario", "FuncionarioCadastroFuncionalNavigation")
                        .WithMany("Ferramenta")
                        .HasForeignKey("FuncionarioCadastroFuncional")
                        .HasPrincipalKey("Funcional")
                        .IsRequired()
                        .HasConstraintName("FK_Funcionario_Cadastro_Funcional");

                    b.HasOne("MVC.Models.TipoSituacao", "Situacao")
                        .WithMany("Ferramenta")
                        .HasForeignKey("SituacaoId")
                        .IsRequired()
                        .HasConstraintName("FK_Ferramenta_Situacao");

                    b.HasOne("MVC.Models.TipoFerramentum", "Tipo")
                        .WithMany("Ferramenta")
                        .HasForeignKey("TipoId")
                        .IsRequired()
                        .HasConstraintName("FK_Ferramenta_Tipo");

                    b.Navigation("FuncionarioCadastroFuncionalNavigation");

                    b.Navigation("Situacao");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("MVC.Models.Funcionario", b =>
                {
                    b.HasOne("MVC.Models.Endereco", "Endereco")
                        .WithMany("Funcionarios")
                        .HasForeignKey("EnderecoId")
                        .IsRequired()
                        .HasConstraintName("FK_Funcionario_Endereco");

                    b.HasOne("MVC.Models.TipoPapel", "Papel")
                        .WithMany("Funcionarios")
                        .HasForeignKey("PapelId")
                        .IsRequired()
                        .HasConstraintName("FK_Funcionario_Papel");

                    b.HasOne("MVC.Models.TipoPermissao", "Permissao")
                        .WithMany("Funcionarios")
                        .HasForeignKey("PermissaoId")
                        .IsRequired()
                        .HasConstraintName("FK_Funcionario_Permissao");

                    b.Navigation("Endereco");

                    b.Navigation("Papel");

                    b.Navigation("Permissao");
                });

            modelBuilder.Entity("MVC.Models.Orcamento", b =>
                {
                    b.HasOne("MVC.Models.Cliente", "ClienteCpfNavigation")
                        .WithMany("Orcamentos")
                        .HasForeignKey("ClienteCpf")
                        .HasPrincipalKey("Cpf")
                        .IsRequired()
                        .HasConstraintName("FK_Orcamento_Cliente_Cpf");

                    b.HasOne("MVC.Models.Ferramentum", "FerramentaCodigoNavigation")
                        .WithMany("Orcamentos")
                        .HasForeignKey("FerramentaCodigo")
                        .HasPrincipalKey("Codigo")
                        .IsRequired()
                        .HasConstraintName("FK_Orcamento_Ferramenta_Codigo");

                    b.Navigation("ClienteCpfNavigation");

                    b.Navigation("FerramentaCodigoNavigation");
                });

            modelBuilder.Entity("MVC.Models.Orcamento_ferramenta", b =>
                {
                    b.HasOne("MVC.Models.Ferramentum", "Ferramenta_Orc")
                        .WithMany("Processos_Many")
                        .HasForeignKey("ferramenta_id")
                        .HasPrincipalKey("Codigo")
                        .HasConstraintName("FK_Ferramenta");

                    b.HasOne("MVC.Models.Orcamento", "Orcamento_Orc")
                        .WithMany("Processos_Many")
                        .HasForeignKey("orcamento_id")
                        .HasPrincipalKey("Id")
                        .HasConstraintName("Fk_Orcamento");

                    b.Navigation("Ferramenta_Orc");

                    b.Navigation("Orcamento_Orc");
                });

            modelBuilder.Entity("MVC.Models.Processo", b =>
                {
                    b.HasOne("MVC.Models.Ferramentum", "FerramentaCodigoNavigation")
                        .WithMany("Processos")
                        .HasForeignKey("FerramentaCodigo")
                        .HasPrincipalKey("Codigo")
                        .IsRequired()
                        .HasConstraintName("FK_Processo_Ferramenta_Codigo");

                    b.HasOne("MVC.Models.Funcionario", "FuncionarioResponsavelFuncionalNavigation")
                        .WithMany("Processos")
                        .HasForeignKey("FuncionarioResponsavelFuncional")
                        .HasPrincipalKey("Funcional")
                        .IsRequired()
                        .HasConstraintName("FK_Processo_Funcionario_Responsavel");

                    b.HasOne("MVC.Models.TipoProcesso", "TipoProcesso")
                        .WithMany("Processos")
                        .HasForeignKey("TipoProcessoId")
                        .IsRequired()
                        .HasConstraintName("FK_Processo_Tipo");

                    b.Navigation("FerramentaCodigoNavigation");

                    b.Navigation("FuncionarioResponsavelFuncionalNavigation");

                    b.Navigation("TipoProcesso");
                });

            modelBuilder.Entity("MVC.Models.Cliente", b =>
                {
                    b.Navigation("Emprestimos");

                    b.Navigation("Orcamentos");
                });

            modelBuilder.Entity("MVC.Models.Endereco", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("MVC.Models.Ferramentum", b =>
                {
                    b.Navigation("Emprestimos");

                    b.Navigation("Orcamentos");

                    b.Navigation("Processos");

                    b.Navigation("Processos_Many");
                });

            modelBuilder.Entity("MVC.Models.Funcionario", b =>
                {
                    b.Navigation("Ferramenta");

                    b.Navigation("Processos");
                });

            modelBuilder.Entity("MVC.Models.Orcamento", b =>
                {
                    b.Navigation("Processos_Many");
                });

            modelBuilder.Entity("MVC.Models.TipoFerramentum", b =>
                {
                    b.Navigation("Ferramenta");
                });

            modelBuilder.Entity("MVC.Models.TipoPapel", b =>
                {
                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("MVC.Models.TipoPermissao", b =>
                {
                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("MVC.Models.TipoProcesso", b =>
                {
                    b.Navigation("Processos");
                });

            modelBuilder.Entity("MVC.Models.TipoSituacao", b =>
                {
                    b.Navigation("Ferramenta");
                });
#pragma warning restore 612, 618
        }
    }
}
